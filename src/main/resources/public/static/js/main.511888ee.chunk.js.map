{"version":3,"sources":["utils/ace-minidb-sql.js","components/PageLayout.tsx","components/SQLEditor.tsx","components/OpHistory.tsx","components/ResultTable.tsx","components/StatusBar.tsx","data-center/network.ts","components/Main.tsx","components/PageWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","SqlHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","start","end","normalizeRules","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","call","prototype","Content","Layout","PageLayout","props","style","position","width","height","zIndex","padding","backgroundColor","boxShadow","header","marginTop","content","SQLEditor","useState","defaultCode","code","setCode","selectedCode","setSelectedCode","startRow","setStartRow","useEffect","annotations","Ribbon","text","margin","danger","disabled","isCodeRunning","size","onClick","onRunCode","type","onRunSelectedCode","border","fontSize","mode","theme","value","onChange","onSelectionChange","JSON","parse","stringify","row","column","codeRows","split","res","i","length","push","substring","join","getSelectedCode","showPrintMargin","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","columns","title","dataIndex","render","isSuccess","OpHistory","tableRef","useRef","tableBody","current","getElementsByClassName","scrollTop","histories","onClearHistory","ref","className","pagination","dataSource","scroll","y","onRow","record","index","event","onRecoverHistory","VirtualTable","tableWidth","setTableWidth","widthColumnCount","filter","mergedColumns","map","Math","max","floor","gridRef","obj","Object","defineProperty","get","set","scrollLeft","scrollTo","connectObject","resetVirtualGrid","resetAfterIndices","columnIndex","shouldForceUpdate","onResize","components","body","rawData","scrollbarSize","onScroll","columnCount","columnWidth","rowCount","rowHeight","rowIndex","classNames","StatusBar","lineHeight","span","marginLeft","color","fontWeight","curDatabase","axiosIns","axios","create","runSQL","sql","post","command","toLowerCase","Main","setHistories","resultColumns","setResultColumns","resultData","setResultData","pageHeight","setPageHeight","loading","setLoading","setCurDatabase","setDefaultCode","setAnnotations","then","data","catch","err","console","log","window","innerHeight","gutter","forEach","item","status","message","totalTime","time","key","errors","error","runCode","runSelectedCode","historyIndex","getSelection","removeAllRanges","history","find","success","x","PageWrapper","overflow","children","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.511888ee.chunk.js","sourcesContent":["/* eslint-disable no-undef */\r\nace.define(\"ace/mode/sql_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\r\n  \"use strict\";\r\n  \r\n  var oop = acequire(\"../lib/oop\");\r\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\r\n  \r\n  var SqlHighlightRules = function() {\r\n  \r\n    //   var keywords = (\r\n    //       \"select|insert|update|delete|from|where|and|or|group|by|order|limit|offset|having|as|case|\" +\r\n    //       \"when|else|end|type|left|right|join|on|outer|desc|asc|union|create|table|primary|key|if|\" +\r\n    //       \"foreign|not|references|default|null|inner|cross|natural|database|drop|grant\"\r\n    //   );\r\n      var keywords = (\r\n        \"select|insert|update|delete|from|where|and|or|group|by|order|limit|offset|\" +\r\n        \"left|right|join|on|outer|desc|asc|create|table|\" +\r\n        \"not|default|null|inner|database|drop\"\r\n    );\r\n  \r\n      var builtinConstants = (\r\n          \"true|false\"\r\n      );\r\n  \r\n    //   var builtinFunctions = (\r\n    //       \"avg|count|first|last|max|min|sum|ucase|lcase|mid|len|round|rank|now|format|\" + \r\n    //       \"coalesce|ifnull|isnull|nvl\"\r\n    //   );\r\n    var builtinFunctions = (\r\n        \"count\"\r\n    );\r\n  \r\n    //   var dataTypes = (\r\n    //       \"int|numeric|decimal|date|varchar|char|bigint|float|double|bit|binary|text|set|timestamp|\" +\r\n    //       \"money|real|number|integer\"\r\n    //   );\r\n    var dataTypes = (\r\n        \"int|date|varchar|double|binary\"\r\n    );\r\n  \r\n      var keywordMapper = this.createKeywordMapper({\r\n          \"support.function\": builtinFunctions,\r\n          \"keyword\": keywords,\r\n          \"constant.language\": builtinConstants,\r\n          \"storage.type\": dataTypes\r\n      }, \"identifier\", true);\r\n  \r\n      this.$rules = {\r\n          \"start\" : [ {\r\n              token : \"comment\",\r\n              regex : \"--.*$\"\r\n          },  {\r\n              token : \"comment\",\r\n              start : \"/\\\\*\",\r\n              end : \"\\\\*/\"\r\n          }, {\r\n              token : \"string\",           // \" string\r\n              regex : '\".*?\"'\r\n          }, {\r\n              token : \"string\",           // ' string\r\n              regex : \"'.*?'\"\r\n          }, {\r\n              token : \"string\",           // ` string (apache drill)\r\n              regex : \"`.*?`\"\r\n          }, {\r\n              token : \"constant.numeric\", // float\r\n              regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n          }, {\r\n              token : keywordMapper,\r\n              regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\r\n          }, {\r\n              token : \"keyword.operator\",\r\n              regex : \"\\\\+|\\\\-|\\\\/|\\\\/\\\\/|%|<@>|@>|<@|&|\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\r\n          }, {\r\n              token : \"paren.lparen\",\r\n              regex : \"[\\\\(]\"\r\n          }, {\r\n              token : \"paren.rparen\",\r\n              regex : \"[\\\\)]\"\r\n          }, {\r\n              token : \"text\",\r\n              regex : \"\\\\s+\"\r\n          } ]\r\n      };\r\n      this.normalizeRules();\r\n  };\r\n  \r\n  oop.inherits(SqlHighlightRules, TextHighlightRules);\r\n  \r\n  exports.SqlHighlightRules = SqlHighlightRules;\r\n  });\r\n  \r\n  ace.define(\"ace/mode/sql\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/sql_highlight_rules\"], function(acequire, exports, module) {\r\n  \"use strict\";\r\n  \r\n  var oop = acequire(\"../lib/oop\");\r\n  var TextMode = acequire(\"./text\").Mode;\r\n  var SqlHighlightRules = acequire(\"./sql_highlight_rules\").SqlHighlightRules;\r\n  \r\n  var Mode = function() {\r\n      this.HighlightRules = SqlHighlightRules;\r\n      this.$behaviour = this.$defaultBehaviour;\r\n  };\r\n  oop.inherits(Mode, TextMode);\r\n  \r\n  (function() {\r\n  \r\n      this.lineCommentStart = \"--\";\r\n  \r\n      this.$id = \"ace/mode/sql\";\r\n  }).call(Mode.prototype);\r\n  \r\n  exports.Mode = Mode;\r\n  \r\n  });","import React from 'react';\r\n\r\nimport { Layout } from 'antd';\r\n\r\ninterface IProps {\r\n  header: React.ReactNode;\r\n  content: React.ReactNode;\r\n}\r\n\r\nconst { Content } = Layout;\r\n\r\nexport default function PageLayout(props: React.PropsWithChildren<IProps>) {\r\n  const headerHeight = 40;\r\n  const bgColor = '#fff';\r\n\r\n  return (\r\n    <Layout style={{\r\n      position: 'relative',\r\n      width: '100%',\r\n      height: '100%'\r\n    }}>\r\n      <div style={{ \r\n        position: 'fixed', \r\n        zIndex: 1,\r\n        width: '100%', \r\n        height: headerHeight,\r\n        padding: '0 20px',\r\n        backgroundColor: bgColor,\r\n        boxShadow: '0px 0px 30px rgba(0, 0, 0, 0.2)'\r\n      }}>\r\n        { props.header }\r\n      </div>\r\n\r\n      <Content style={{ padding: 20, marginTop: headerHeight, backgroundColor: bgColor }}>\r\n        { props.content }\r\n      </Content>\r\n    </Layout>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nimport AceEditor from \"react-ace\";\r\n// import \"ace-builds/src-noconflict/mode-sql\";\r\nimport \"../utils/ace-minidb-sql\";\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport { Badge, Button } from 'antd';\r\nimport { Ace } from 'ace-builds';\r\n\r\ninterface IProps {\r\n  defaultCode: string;\r\n  isCodeRunning: boolean;\r\n  annotations: Ace.Annotation[];\r\n  onRunCode: (code: string) => void;\r\n  onRunSelectedCode: (selectedCode: string, startRow: number, code: string) => void;\r\n}\r\n\r\n\r\nexport default function SQLEditor(props: IProps) {\r\n  const [code, setCode] = useState(props.defaultCode);\r\n  const [selectedCode, setSelectedCode] = useState('');\r\n  const [startRow, setStartRow] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setCode(props.defaultCode);\r\n  }, [props.defaultCode, props.annotations]);\r\n\r\n  const getSelectedCode = (value: any) => {\r\n    if(code === '') {\r\n      return '';\r\n    }\r\n    \r\n    value = JSON.parse(JSON.stringify(value));\r\n    const { start, end } = value;\r\n    setStartRow(start.row);\r\n\r\n    if(start.row === end.row && start.column === end.column) {\r\n      return '';\r\n    }\r\n\r\n    const codeRows = code.split('\\n');\r\n    let res = [];\r\n\r\n    for(let i = start.row; i <= end.row; i++) {\r\n      if(i >= codeRows.length) {\r\n        break;\r\n      }\r\n      \r\n      if(i === start.row) {\r\n        if(i === end.row) {\r\n          res.push(codeRows[i].substring(start.column, end.column));\r\n          continue;\r\n        }\r\n        res.push(codeRows[i].substring(start.column));\r\n        continue;\r\n      }\r\n      if(i === end.row) {\r\n        res.push(codeRows[i].substring(0, end.column));\r\n        continue;\r\n      }\r\n      res.push(codeRows[i]);\r\n    }\r\n    \r\n    return res.join('\\n') + '\\n';\r\n  }\r\n\r\n  return (\r\n    <Badge.Ribbon text=\"SQL Editor\">\r\n      <div style={{ margin: '10px 0' }}>\r\n        <Button\r\n          danger\r\n          disabled={props.isCodeRunning}\r\n          size=\"small\" \r\n          style={{ margin: '0 4px' }}\r\n          onClick={() => props.onRunCode(code)}\r\n        >Run SQL</Button>\r\n        <Button \r\n          disabled={props.isCodeRunning}\r\n          type=\"default\" \r\n          size=\"small\" \r\n          style={{ margin: '0 4px' }}\r\n          onClick={() => props.onRunSelectedCode(selectedCode, startRow, code)}\r\n        >Run selected SQL</Button>\r\n\r\n        <Button \r\n          type=\"default\" \r\n          size=\"small\" \r\n          style={{ margin: '0 4px' }}\r\n          onClick={() => setCode('')}\r\n        >Clear SQL</Button>\r\n      </div>\r\n\r\n      <AceEditor\r\n        width=\"100%\"\r\n        height=\"25vh\"\r\n        style={{\r\n          border: '1px solid #f0f0f0'\r\n        }}\r\n        fontSize=\"16px\"\r\n        mode=\"sql\"\r\n        theme=\"github\"\r\n\r\n        value={code}\r\n        onChange={(value) => setCode(value)}\r\n        onSelectionChange={(value) => setSelectedCode(getSelectedCode(value))}\r\n\r\n        annotations={props.annotations}\r\n\r\n        showPrintMargin={false}\r\n        editorProps={{\r\n          $blockScrolling: true\r\n        }}\r\n        setOptions={{\r\n          enableBasicAutocompletion: true,\r\n          enableLiveAutocompletion: true,\r\n          enableSnippets: true\r\n        }}\r\n      />\r\n    </Badge.Ribbon>\r\n  )\r\n}\r\n","import { Badge, Button, Table } from 'antd';\r\nimport React, { useEffect, useRef } from 'react'\r\n\r\ninterface IHistory {\r\n  key: number;\r\n  isSuccess: boolean;\r\n  message: string;\r\n  totalTime: string;\r\n  time: string;\r\n}\r\n\r\ninterface IProps {\r\n  histories: IHistory[];\r\n  onClearHistory: () => void;\r\n  onRecoverHistory: (historyIndex: number) => void;\r\n}\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    render: (isSuccess: boolean) => {\r\n      return isSuccess ? '✔' : '❌';\r\n    }\r\n  },\r\n  {\r\n    title: 'Message',\r\n    dataIndex: 'message'\r\n  },\r\n  {\r\n    title: 'Total time',\r\n    dataIndex: 'totalTime'\r\n  },\r\n  {\r\n    title: 'time',\r\n    dataIndex: 'time'\r\n  },\r\n]\r\n\r\nexport default function OpHistory(props: IProps) {\r\n  const tableRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const tableBody = tableRef.current?.getElementsByClassName('ant-table-body')[0];\r\n\r\n    if(tableBody) {\r\n      tableBody.scrollTop = 10000;\r\n    }\r\n  }, [props.histories]);\r\n\r\n  return (\r\n    <Badge.Ribbon text=\"Operation History\">\r\n      <div style={{ margin: '10px 0' }}>\r\n        <Button \r\n          type=\"default\" \r\n          size=\"small\" \r\n          style={{ margin: '0 4px' }}\r\n          onClick={() => props.onClearHistory()}\r\n        >Clear History</Button>\r\n      </div>\r\n      \r\n      <div ref={tableRef}>\r\n        <Table\r\n          className=\"op-history\"\r\n          size=\"small\"\r\n          pagination={false}\r\n          columns={columns}\r\n          dataSource={props.histories}\r\n          scroll={{ y: 'calc(25vh - 28px)' }}\r\n          onRow={(record, index) => ({\r\n            onClick: event => props.onRecoverHistory(index!)\r\n          })}\r\n        />\r\n      </div>\r\n    </Badge.Ribbon>\r\n  )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { VariableSizeGrid as Grid } from 'react-window';\r\nimport ResizeObserver from 'rc-resize-observer';\r\nimport classNames from 'classnames';\r\nimport { Table } from 'antd';\r\n\r\ninterface IProps {\r\n  columns: {\r\n    title: string;\r\n    dataIndex: string;\r\n    width?: number;\r\n  }[];\r\n  dataSource: any[];\r\n  scroll: any;\r\n  loading: boolean;\r\n}\r\n\r\nexport default function VirtualTable(props: IProps) {\r\n  const { columns, scroll } = props;\r\n  const [tableWidth, setTableWidth] = useState(0);\r\n\r\n  const widthColumnCount = columns.filter(({ width }) => !width).length;\r\n  const mergedColumns = columns.map(column => {\r\n    if (column.width) {\r\n      return column;\r\n    }\r\n\r\n    return {\r\n      ...column,\r\n      width: Math.max(Math.floor(tableWidth / widthColumnCount), 100),\r\n    };\r\n  }) as {\r\n    title: string;\r\n    dataIndex: string;\r\n    width: number;\r\n  }[];\r\n\r\n  const gridRef = useRef<any>();\r\n  const [connectObject] = useState<any>(() => {\r\n    const obj = {};\r\n    Object.defineProperty(obj, 'scrollLeft', {\r\n      get: () => null,\r\n      set: (scrollLeft: number) => {\r\n        if (gridRef.current) {\r\n          gridRef.current.scrollTo({ scrollLeft });\r\n        }\r\n      },\r\n    });\r\n\r\n    return obj;\r\n  });\r\n\r\n  const resetVirtualGrid = () => {\r\n    gridRef.current.resetAfterIndices({\r\n      columnIndex: 0,\r\n      shouldForceUpdate: false,\r\n    });\r\n  };\r\n\r\n  useEffect(() => resetVirtualGrid, [tableWidth, props.columns]);\r\n\r\n  const renderVirtualList = (rawData: any[], { scrollbarSize, ref, onScroll }: any) => {\r\n    ref.current = connectObject;\r\n\r\n    return (\r\n      <Grid\r\n        ref={gridRef}\r\n        className=\"virtual-grid\"\r\n        columnCount={mergedColumns.length}\r\n        columnWidth={index => {\r\n          const { width } = mergedColumns[index];\r\n          return index === mergedColumns.length - 1 ? width - scrollbarSize - 1 : width;\r\n        }}\r\n        height={scroll.y}\r\n        rowCount={rawData.length}\r\n        rowHeight={() => 20}\r\n        width={tableWidth}\r\n        onScroll={({ scrollLeft }) => {\r\n          onScroll({ scrollLeft });\r\n        }}\r\n      >\r\n        {({ columnIndex, rowIndex, style }) => (\r\n          <div\r\n            className={classNames('virtual-table-cell', {\r\n              'virtual-table-cell-last': columnIndex === mergedColumns.length - 1,\r\n            })}\r\n            style={style}\r\n            title={rawData[rowIndex][mergedColumns[columnIndex].dataIndex]}\r\n          >\r\n            {rawData[rowIndex][mergedColumns[columnIndex].dataIndex]}\r\n          </div>\r\n        )}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ResizeObserver\r\n      onResize={({ width }) => {\r\n        setTableWidth(width);\r\n      }}\r\n    >\r\n      <Table\r\n        {...props}\r\n        size=\"small\"\r\n        className=\"virtual-table\"\r\n        columns={mergedColumns}\r\n        pagination={false}\r\n        components={{\r\n          body: renderVirtualList,\r\n        }}\r\n      />\r\n    </ResizeObserver>\r\n  );\r\n}\r\n","import { Row, Col } from 'antd'\r\nimport React from 'react'\r\n\r\ninterface IProps {\r\n  curDatabase: string;\r\n}\r\n\r\nexport default function StatusBar(props: IProps) {\r\n  return (\r\n    <Row style={{ height: '40px', lineHeight: '40px' }}>\r\n      <Col span={8}>\r\n        Current Database:\r\n        <span style={{ marginLeft: 20, color: '#1890ff', fontWeight: 'bold' }}>\r\n          { props.curDatabase }\r\n        </span>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n","import { Ace } from 'ace-builds';\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\nconst axiosIns = axios.create();\r\nconst isMock = false;\r\n\r\ninterface IRunSQLRes {\r\n  /**\r\n   * SQL执行成功返回true，反正false。\r\n   */\r\n  status: boolean;\r\n  /**\r\n   * SQL执行的反馈信息。\r\n   * \r\n   * e.g.\r\n   * 查询语句执行之后，可返回message为 \"10000 rows returned.\"\r\n   */\r\n  message: string;\r\n  /**\r\n   * 执行本次SQL语句所用时间。\r\n   * \r\n   * e.g.\r\n   * \"0.34s\"\r\n   */\r\n  totalTime: string;\r\n  /**\r\n   * 执行本次SQL语句的时间。\r\n   * \r\n   * e.g.\r\n   * \"16:49\"\r\n   */\r\n  time: string;\r\n  /**\r\n   * 执行本次SQL语句后当前数据库的名字。\r\n   */\r\n  curDatabase: string;\r\n\r\n  /**\r\n   * 执行本次SQL语句查询到的数据列。如果不是查询语句，则返回空数组[]。\r\n   * \r\n   * e.g.\r\n   * ['id', 'name', 'age']\r\n   */\r\n  columns: string[];\r\n  /**\r\n   * 执行本次SQL语句查询到的数据。如果不是查询语句或查询结果为空，则返回空数组[]。\r\n   * \r\n   * e.g.\r\n   * [\r\n   *   { id: 1, name: 'zhang', age: 20 },\r\n   *   { id: 2, name: 'asfdasdf', age: 23 },\r\n   *   { id: 3, name: 'ljk', age: 20 },\r\n   * ]\r\n   */\r\n  data: any[];\r\n  /**\r\n   * 本次SQL语句的语法错误出现位置。如果没有语法错误，则为null。\r\n   */\r\n  error: Required<Ace.Annotation> | null;\r\n}\r\n\r\nexport const runSQL = (sql: string) => {\r\n  if(!isMock) {\r\n    return axiosIns.post<any, AxiosResponse<IRunSQLRes[]>>('/api/runsql', {\r\n      command: sql\r\n    });\r\n  }\r\n  \r\n  return new Promise<{ data: IRunSQLRes[] }>((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        data: [{\r\n          status: true,\r\n          message: '3000000 rows returned.',\r\n          totalTime: '0.53s',\r\n          time: '16:34',\r\n          curDatabase: 'student',\r\n          columns: ['id', 'name', 'age', 'home', 'phone', 'phone1', 'phone2', 'phone3', 'phone4', 'phone5'],\r\n          data: Array.from({length: 300000}, (_, item) => ({\r\n            key: item,\r\n            id: item,\r\n            name: '' + item + item + item,\r\n            age: item * 2,\r\n            home: '' + item + item + item,\r\n            phone: '' + item + item + item,\r\n            phone1: '' + item + item + item,\r\n            phone2: '' + item + item + item,\r\n            phone3: '' + item + item + item,\r\n            phone4: '' + item + item + item,\r\n            phone5: '' + item + item + item,\r\n          })),\r\n          error: {\r\n            row: 1,\r\n            column: 2,\r\n            text: 'error in asdf',\r\n            type: \"error\"\r\n          }\r\n        }, {\r\n          status: false,\r\n          message: '200000 rows returned.',\r\n          totalTime: '0.5345s',\r\n          time: '16:34',\r\n          curDatabase: 'student',\r\n          columns: ['id', 'name', 'age', 'home', 'phone', 'phone1', 'phone2', 'phone3', 'phone4', 'phone5'],\r\n          data: Array.from({length: 300000}, (_, item) => ({\r\n            key: item,\r\n            id: item,\r\n            name: '' + item + item + item,\r\n            age: item * 2,\r\n            home: '' + item + item + item,\r\n            phone: '' + item + item + item,\r\n            phone1: '' + item + item + item,\r\n            phone2: '' + item + item + item,\r\n            phone3: '' + item + item + item,\r\n            phone4: '' + item + item + item,\r\n            phone5: '' + item + item + item,\r\n          })),\r\n          error: {\r\n            row: 2,\r\n            column: 3,\r\n            text: 'error in asdf',\r\n            type: \"error\"\r\n          }\r\n        }]\r\n      })\r\n    }, 0);\r\n  });\r\n};\r\n\r\ninterface ICurDatabaseRes {\r\n  /**\r\n   * 如果至少存在一个数据库，则返回true，反之返回false。\r\n   */\r\n  status: boolean;\r\n  /**\r\n   * 如果至少存在一个数据库，则返回第一个找到的数据库的名字，反之返回空字符串。\r\n   */\r\n  res: string;\r\n}\r\n\r\nexport const getCurDatabase = () => {\r\n  if(!isMock) {\r\n    return axiosIns.get<any, AxiosResponse<ICurDatabaseRes>>('/api/curdb');\r\n  }\r\n  \r\n  return new Promise<any>((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        data: {\r\n          status: true,\r\n          res: '(Please use a database!)'\r\n        }\r\n      })\r\n    }, 100);\r\n  });\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nimport { Row, Col, message } from 'antd';\r\n\r\nimport PageLayout from './PageLayout';\r\nimport SQLEditor from './SQLEditor';\r\nimport OpHistory from './OpHistory';\r\nimport ResultTable from './ResultTable';\r\nimport StatusBar from './StatusBar';\r\n\r\nimport { getCurDatabase, runSQL } from '../data-center/network';\r\nimport { Ace } from 'ace-builds';\r\n\r\ninterface ITableColumn {\r\n  title: string;\r\n  dataIndex: string;\r\n}\r\n\r\nconst toLowerCase = (obj: any) => {\r\n  return JSON.parse(JSON.stringify(obj).toLowerCase());\r\n}\r\n\r\nexport default function Main() {\r\n  const [histories, setHistories] = useState<any[]>([]);\r\n  const [resultColumns, setResultColumns] = useState<ITableColumn[]>([]);\r\n  const [resultData, setResultData] = useState<any[]>([]);\r\n  const [pageHeight, setPageHeight] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [curDatabase, setCurDatabase] = useState('(loading...)');\r\n  const [defaultCode, setDefaultCode] = useState('');\r\n  const [annotations, setAnnotations] = useState([] as Ace.Annotation[]);\r\n\r\n  useEffect(() => {\r\n    getCurDatabase()\r\n    .then(res => {\r\n      const { data } = res;\r\n      if(data.res !== '') {\r\n        setCurDatabase(toLowerCase(data.res));\r\n      } else {\r\n        setCurDatabase('(No database found!)');\r\n      }\r\n    })\r\n    .catch(err => console.log(err));\r\n    setResultColumns(['No result.'].map(column => ({\r\n      title: column,\r\n      dataIndex: column\r\n    })));\r\n\r\n    setPageHeight(window.innerHeight);\r\n  }, []);\r\n\r\n  const runCode = (code: string) => {\r\n    setLoading(true);\r\n    console.log(code);\r\n    runSQL(code)\r\n    .then(res => {\r\n      setLoading(false);\r\n\r\n      res.data.forEach((item) => {\r\n        const {\r\n          data,\r\n          columns,\r\n          status,\r\n          message,\r\n          totalTime,\r\n          time,\r\n          curDatabase\r\n        } = item;\r\n  \r\n        setCurDatabase(toLowerCase(curDatabase));\r\n        setResultData(toLowerCase(data));\r\n        setResultColumns((columns.length === 0 ? ['No result.'] : columns).map(column => ({\r\n          title: toLowerCase(column),\r\n          dataIndex: toLowerCase(column)\r\n        })));\r\n        setHistories(histories => [...histories, {\r\n          key: histories.length,\r\n          status,\r\n          message,\r\n          totalTime: totalTime + \"ms\",\r\n          time,\r\n          code\r\n        }]);\r\n        setDefaultCode(code);\r\n      });\r\n\r\n      const errors = res.data.map(item => item.error).filter(item => item !== null) as Required<Ace.Annotation>[];\r\n      if(errors.length) {\r\n        setAnnotations(errors.map(error => ({\r\n          ...error,\r\n          row: error.row - 1,\r\n        })));\r\n      } else {\r\n        setAnnotations([]);\r\n      }\r\n    })\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n  const runSelectedCode = (selectedCode: string, startRow: number, code: string) => {\r\n    setLoading(true);\r\n    console.log(selectedCode)\r\n    runSQL(selectedCode)\r\n    .then(res => {\r\n      setLoading(false);\r\n\r\n      res.data.forEach((item) => {\r\n        const {\r\n          data,\r\n          columns,\r\n          status,\r\n          message,\r\n          totalTime,\r\n          time,\r\n          curDatabase\r\n        } = item;\r\n  \r\n        setCurDatabase(toLowerCase(curDatabase));\r\n        setResultData(toLowerCase(data));\r\n        setResultColumns((columns.length === 0 ? ['No result.'] : columns).map(column => ({\r\n          title: toLowerCase(column),\r\n          dataIndex: toLowerCase(column)\r\n        })));\r\n        setHistories(histories => [...histories, {\r\n          key: histories.length,\r\n          status,\r\n          message,\r\n          totalTime: totalTime + \"ms\",\r\n          time,\r\n          code\r\n        }]);\r\n        setDefaultCode(code);\r\n      })\r\n\r\n      const errors = res.data.map(item => item.error).filter(item => item !== null) as Required<Ace.Annotation>[];\r\n      if(errors.length) {\r\n        setAnnotations(errors.map(error => ({\r\n          ...error,\r\n          row: error.row - 1 + startRow,\r\n        })));\r\n      } else {\r\n        setAnnotations([]);\r\n      }\r\n    })\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n  const recoverHistory = (historyIndex: number) => {\r\n    window.getSelection()?.removeAllRanges();\r\n\r\n    const history = histories.find(history => history.key === historyIndex);\r\n    setDefaultCode(history.code);\r\n\r\n    message.success(`Recovered to history code in ${history.time}!`);\r\n  }\r\n\r\n  return (\r\n    <PageLayout\r\n      header={\r\n        <StatusBar\r\n          curDatabase={curDatabase}\r\n        />\r\n      }\r\n      content={\r\n        <>\r\n          <Row gutter={[60, 36]}>\r\n            <Col span={12}>\r\n              <SQLEditor\r\n                annotations={annotations}\r\n                defaultCode={defaultCode}\r\n                isCodeRunning={loading}\r\n                onRunCode={(code) => runCode(code)}\r\n                onRunSelectedCode={(selectedCode, startRow, code) => runSelectedCode(selectedCode, startRow, code)}\r\n              />\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <OpHistory\r\n                onClearHistory={() => setHistories([])}\r\n                onRecoverHistory={recoverHistory}\r\n                histories={histories}\r\n              />\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row gutter={[60, 36]}>\r\n            <Col span={24}>\r\n              <ResultTable\r\n                columns={resultColumns}\r\n                dataSource={resultData}\r\n                loading={loading}\r\n                scroll={{ y: pageHeight * 0.75 - 190, x: 'calc(100vw - 60px)' }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\ninterface IProps {}\r\n\r\nexport default function PageWrapper(props: React.PropsWithChildren<IProps>) {\r\n  return (\r\n    <div style={{\r\n      position: 'relative',\r\n      width: '100vw',\r\n      height: '100vh',\r\n      overflow: 'hidden'\r\n    }}>\r\n      { props.children }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport PageWrapper from './components/PageWrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageWrapper>\n        <Main />\n      </PageWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}